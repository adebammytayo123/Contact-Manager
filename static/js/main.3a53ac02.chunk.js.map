{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","color","float","bind","to","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","Phone","newContact","post","history","push","target","EditContact","updContact","match","params","put","Header","branding","href","Test","title","completed","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3a53ac02.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact =>\r\n                    contact.id !== action.payload\r\n                )\r\n            };\r\n            case 'ADD_CONTACT':\r\n                return {\r\n                    ...state,\r\n                    contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact =>\r\n                    contact.id === action.payload.id ? (contact= action.payload) : contact)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n    async componentDidMount() {\r\n         const res = await axios\r\n             .get('http://jsonplaceholder.typicode.com/users');\r\n         \r\n         this.setState({ contacts: res.data });\r\n            \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\n\r\nexport class Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    }\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete\r\n                (`http://jsonplaceholder.typicode.com/users/${id}`);\r\n        \r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        } catch (e) {\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        }\r\n    }\r\n    render() {\r\n        const { id,name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                           <h4> {name} {' '}\r\n                            <i\r\n                              onClick={() =>\r\n                                        this.setState({\r\n                                            showContactInfo:\r\n                                                !this.state.showContactInfo\r\n                                        })\r\n                                }\r\n                                className=\"fas fa-sort-down\"\r\n                                style={{ cursor:'pointer'}}\r\n                            />\r\n                            <i className=\"fas fa-times\"\r\n                                style={{ cursor: 'pointer', color: 'red', float: 'right' }}\r\n                                onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                                />\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{\r\n                                            cursor:'pointer',\r\n                                            float: 'right',\r\n                                            color: 'black',\r\n                                            marginRight: '1rem'\r\n                                        }}\r\n                                    ></i>\r\n                                </Link>\r\n                            </h4>\r\n                            { showContactInfo ? (<ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Email: {email} </li>\r\n                            <li className=\"list-group-item\">Phone: {phone} </li>\r\n                            </ul>) : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    };\r\n};\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n   \r\n}\r\n\r\nexport default Contact\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context'\r\n\r\nexport class Contacts extends Component {\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span\r\n                                className=\"text-danger\">Contact</span> List</h1>\r\n                          {contacts.map(contact =>\r\n                            <Contact\r\n                                  key={contact.id}\r\n                                  contact={contact}\r\n                            />\r\n                          )}  \r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    type,\r\n    value,\r\n    placeholder,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {\r\n                    'is-invalid':error\r\n                }\r\n                )}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />{error && <div className=\"invalid-feedback\">{error}</div> }\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\nexport default TextInputGroup\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n\r\nexport class AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        \r\n        const { name, email, phone } = this.state;\r\n\r\n        // check for errors\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { Phone: 'Phone is required' } });\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone,\r\n        };\r\n\r\n\r\n        const res = await axios.post\r\n            ('http://jsonplaceholder.typicode.com/users', newContact);\r\n        \r\n        dispatch({ type: 'ADD_CONTACT', payload: res.data });\r\n\r\n        // clear state\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            errors: {}\r\n        })\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n\r\n\r\n    render() {\r\n        const { name, email, phone,errors } = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                          <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone...\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input type=\"submit\" value=\"AddContact\"\r\n                                       className=\" btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default AddContact\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        })\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        \r\n        const { name, email, phone } = this.state;\r\n\r\n        // check for errors\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Name is required' } });\r\n            return;\r\n        }\r\n        if (email === '') {\r\n            this.setState({ errors: { email: 'Email is required' } });\r\n            return;\r\n        }\r\n        if (phone === '') {\r\n            this.setState({ errors: { Phone: 'Phone is required' } });\r\n            return;\r\n        }\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`http://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n        dispatch({type:'UPDATE_CONTACT', payload: res.data})\r\n\r\n        \r\n\r\n        // clear state\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            errors: {}\r\n        })\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n\r\n\r\n    render() {\r\n        const { name, email, phone,errors } = this.state;\r\n        \r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                          <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name...\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email...\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone...\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input type=\"submit\" value=\"UpdateContact\"\r\n                                       className=\" btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default EditContact\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto \">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\"\r\n                                className=\"nav-link\">\r\n                                 <i className=\"fas fa-home\"></i> Home \r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\"\r\n                                className=\"nav-link\">\r\n                                 <i className=\"fas fa-plus\"></i> add \r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\"\r\n                                className=\"nav-link\">\r\n                                 <i className=\"fas fa-question\"></i> About \r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n}\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Header\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1> \r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n"," import React from 'react'\r\n \r\n export default () => {\r\n     return (\r\n         <div>\r\n             <h1 className=\"display-4\"><span className=\"text-danger\"> 404 </span>Page Not Found</h1>\r\n             <p className=\"lead\">Sorry, that page does not exist</p>\r\n         </div>\r\n     )\r\n }\r\n ","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        completed: ''\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch\r\n        ('https://jsonplaceholder.typicode.com/todos/1')\r\n          .then(response => response.json())\r\n            .then(data => this.setState({\r\n                title: data.title,\r\n                completed: data.completed\r\n          }))\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     console.log('componentWillMount...');\r\n    // }\r\n\r\n    // componentDidUpdate() {\r\n    //     console.log('componentDidUpdate...');\r\n    // }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('componentDidUpdate...');\r\n    // }\r\n\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log('componentWillReceiveProps...')\r\n    // }\r\n\r\n    \r\n    render() {\r\n        const { title, completed } = this.state;\r\n        return ( \r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{completed}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nfunction App() {\n  \n  return (\n      <Provider>\n        <Router>\n         <div className=\"App\">\n            <Header branding=\" Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/contact/add\" component={AddContact} />\n              <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n              <Route exact path=\"/about\" component={About} />\n              <Route exact path=\"/test\" component={Test} />\n              <Route component={NotFound} />\n            </Switch>\n              {/* <AddContact />\n              <Contacts /> */}\n            </div>\n          </div>\n         </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}